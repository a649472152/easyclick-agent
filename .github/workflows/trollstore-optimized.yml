name: EasyClick for TrollStore (Ultra-Clean)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout code with LFS
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Git LFS pull
      run: git lfs pull

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'

    - name: Build EasyClick Agent
      run: |
        echo "🔨 开始编译..."
        xcodebuild build-for-testing \
          -project tj-easyclick-agent.xcodeproj \
          -scheme WebDriverAgentRunner \
          -sdk iphoneos \
          -configuration Release \
          -derivedDataPath /tmp/derivedDataPath \
          -allowProvisioningUpdates \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO

    - name: Create TrollStore Ultra-Clean Version
      run: |
        cd /tmp/derivedDataPath/Build/Products/Release-iphoneos
        
        echo "🧹 彻底清理和准备TrollStore版本..."
        
        # 移除不需要的app
        rm -rf IntegrationApp.app || true
        
        # 找到目标app
        TARGET_APP=$(find . -maxdepth 1 -name "*.app" -type d | head -1)
        
        if [ -z "$TARGET_APP" ]; then
          echo "❌ 未找到app文件"
          exit 1
        fi
        
        echo "✅ 处理app: $TARGET_APP"
        
        # 创建干净的工作目录
        rm -rf TrollStore-Clean
        mkdir -p TrollStore-Clean/Payload
        
        # 复制app到新目录
        cp -r "$TARGET_APP" TrollStore-Clean/Payload/
        
        APP_PATH="TrollStore-Clean/Payload/$(basename "$TARGET_APP")"
        echo "🎯 清理app路径: $APP_PATH"
        
        # 1. 移除所有签名相关文件
        echo "🗑️ 移除签名文件..."
        rm -rf "$APP_PATH/_CodeSignature" 2>/dev/null || true
        rm -f "$APP_PATH/embedded.mobileprovision" 2>/dev/null || true
        rm -f "$APP_PATH"/*.mobileprovision 2>/dev/null || true
        
        # 2. 移除Frameworks中的所有签名
        if [ -d "$APP_PATH/Frameworks" ]; then
          echo "🗑️ 清理Frameworks签名..."
          find "$APP_PATH/Frameworks" -name "_CodeSignature" -type d -exec rm -rf {} + 2>/dev/null || true
          find "$APP_PATH/Frameworks" -name "*.mobileprovision" -delete 2>/dev/null || true
        fi
        
        # 3. 移除PlugIns中的所有签名
        if [ -d "$APP_PATH/PlugIns" ]; then
          echo "🗑️ 清理PlugIns签名..."
          find "$APP_PATH/PlugIns" -name "_CodeSignature" -type d -exec rm -rf {} + 2>/dev/null || true
          find "$APP_PATH/PlugIns" -name "*.mobileprovision" -delete 2>/dev/null || true
        fi
        
        # 4. 移除任何可能的签名残留
        find "$APP_PATH" -name "_CodeSignature" -type d -exec rm -rf {} + 2>/dev/null || true
        find "$APP_PATH" -name "*.mobileprovision" -type f -delete 2>/dev/null || true
        find "$APP_PATH" -name "CodeResources" -type f -delete 2>/dev/null || true
        
        # 5. 创建最小化的Info.plist（移除可能的签名相关键）
        if [ -f "$APP_PATH/Info.plist" ]; then
          echo "📝 优化Info.plist..."
          # 备份原始文件
          cp "$APP_PATH/Info.plist" "$APP_PATH/Info.plist.backup"
          
          # 使用plutil移除签名相关的键
          /usr/libexec/PlistBuddy -c "Delete :ApplicationIdentifierPrefix" "$APP_PATH/Info.plist" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Delete :SignerIdentity" "$APP_PATH/Info.plist" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Delete :TeamIdentifier" "$APP_PATH/Info.plist" 2>/dev/null || true
        fi
        
        # 6. 创建简化的entitlements.plist（TrollStore专用）
        echo "📄 创建TrollStore专用entitlements..."
        cat > "$APP_PATH/entitlements.plist" << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>get-task-allow</key>
          <true/>
          <key>com.apple.private.dtrace.allow</key>
          <true/>
        </dict>
        </plist>
        EOF
        
        # 7. 验证清理结果
        echo "🔍 验证清理结果..."
        echo "剩余的签名相关文件:"
        find "$APP_PATH" -name "*CodeSignature*" -o -name "*.mobileprovision" -o -name "*signature*" 2>/dev/null || echo "✅ 无签名文件残留"
        
        # 8. 打包为IPA
        cd TrollStore-Clean
        echo "📦 打包TrollStore专用IPA..."
        zip -r ../EasyClick-TrollStore-UltraClean.ipa Payload
        
        cd ..
        echo "✅ TrollStore专用IPA创建完成:"
        ls -la EasyClick-TrollStore-UltraClean.ipa

    - name: Create Alternative Version (Minimal)
      run: |
        cd /tmp/derivedDataPath/Build/Products/Release-iphoneos
        
        echo "🎯 创建最小化版本..."
        
        # 使用现有的clean版本
        if [ -d "TrollStore-Clean" ]; then
          rm -rf Minimal-Version
          cp -r TrollStore-Clean Minimal-Version
          
          APP_PATH=$(find Minimal-Version/Payload -name "*.app" -type d | head -1)
          
          if [ -n "$APP_PATH" ]; then
            echo "🗑️ 进一步精简..."
            
            # 移除不必要的frameworks（保留核心的）
            if [ -d "$APP_PATH/Frameworks" ]; then
              echo "📦 精简Frameworks..."
              # 只保留关键的框架
              cd "$APP_PATH/Frameworks"
              for fw in *.dylib *.framework; do
                if [[ "$fw" == *"WebDriverAgent"* ]] || [[ "$fw" == *"iosauto"* ]]; then
                  echo "保留: $fw"
                else
                  echo "移除: $fw"
                  rm -rf "$fw" 2>/dev/null || true
                fi
              done
              cd - > /dev/null
            fi
            
            # 移除可能的调试信息
            find "$APP_PATH" -name "*.dSYM" -exec rm -rf {} + 2>/dev/null || true
            find "$APP_PATH" -name "*.symbols" -exec rm -rf {} + 2>/dev/null || true
            
            cd Minimal-Version
            zip -r ../EasyClick-TrollStore-Minimal.ipa Payload
            cd ..
            
            echo "✅ 最小化版本创建完成:"
            ls -la EasyClick-TrollStore-Minimal.ipa
          fi
        fi

    - name: Create Standard Clean Version
      run: |
        cd /tmp/derivedDataPath/Build/Products/Release-iphoneos
        
        echo "📱 创建标准清理版本..."
        
        rm -rf Standard-Clean
        mkdir -p Standard-Clean/Payload
        
        TARGET_APP=$(find . -maxdepth 1 -name "*.app" -type d | grep -v IntegrationApp | head -1)
        cp -r "$TARGET_APP" Standard-Clean/Payload/
        
        cd Standard-Clean
        zip -r ../EasyClick-Standard-Clean.ipa Payload
        cd ..
        
        echo "✅ 标准清理版本创建完成:"
        ls -la EasyClick-Standard-Clean.ipa

    - name: Final Summary
      run: |
        cd /tmp/derivedDataPath/Build/Products/Release-iphoneos
        
        echo "🎉 构建完成！生成的IPA文件："
        echo ""
        for ipa in *.ipa; do
          if [ -f "$ipa" ]; then
            size=$(du -h "$ipa" | cut -f1)
            echo "📱 $ipa - $size"
            
            # 显示每个IPA的内容概览
            echo "   内容预览:"
            unzip -l "$ipa" | grep -E "(Payload/.*\.app/|\.dylib|\.framework)" | head -5
            echo ""
          fi
        done
        
        echo "💡 安装建议："
        echo "1. 优先尝试: EasyClick-TrollStore-UltraClean.ipa → TrollStore"
        echo "2. 备选方案: EasyClick-TrollStore-Minimal.ipa → TrollStore"
        echo "3. 传统方式: EasyClick-Standard-Clean.ipa → Sideloadly/AltStore"

    - name: Upload TrollStore Ultra-Clean
      uses: actions/upload-artifact@v4
      with:
        name: EasyClick-TrollStore-UltraClean
        path: /tmp/derivedDataPath/Build/Products/Release-iphoneos/EasyClick-TrollStore-UltraClean.ipa
        retention-days: 30

    - name: Upload TrollStore Minimal
      uses: actions/upload-artifact@v4
      with:
        name: EasyClick-TrollStore-Minimal
        path: /tmp/derivedDataPath/Build/Products/Release-iphoneos/EasyClick-TrollStore-Minimal.ipa
        retention-days: 30
      continue-on-error: true

    - name: Upload Standard Clean
      uses: actions/upload-artifact@v4
      with:
        name: EasyClick-Standard-Clean
        path: /tmp/derivedDataPath/Build/Products/Release-iphoneos/EasyClick-Standard-Clean.ipa
        retention-days: 30 