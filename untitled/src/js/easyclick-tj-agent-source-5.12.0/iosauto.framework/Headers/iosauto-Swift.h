// Generated by Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef IOSAUTO_SWIFT_H
#define IOSAUTO_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="iosauto",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;
@class UIImage;
@class NSData;

SWIFT_CLASS("_TtC7iosauto7AutoApi")
@interface AutoApi : NSObject
+ (AutoApi * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// 是否缓存了文档
/// \param threadId 线程id
///
///
/// returns:
///
- (BOOL)isCacheDocumentWithThreadId:(NSString * _Nonnull)threadId SWIFT_WARN_UNUSED_RESULT;
/// openUrl
/// \param url 
///
///
/// returns:
///
- (NSString * _Nonnull)openUrl:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// 设置剪切板
/// \param content 
///
/// \param type 
///
///
/// returns:
///
- (NSString * _Nonnull)setClipboardText:(NSString * _Nonnull)content :(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// 读取剪切板
///
/// returns:
///
- (NSString * _Nonnull)getClipboardText SWIFT_WARN_UNUSED_RESULT;
/// 获取一个节点数据
/// \param threadId 线程id
///
/// \param select 
///
///
/// returns:
///
- (NSString * _Nonnull)getOneNodeInfoWithThreadId:(NSString * _Nonnull)threadId select:(NSString * _Nonnull)select SWIFT_WARN_UNUSED_RESULT;
/// 获取一组节点数据
/// \param threadId 线程id
///
/// \param select 
///
///
/// returns:
///
- (NSString * _Nonnull)getNodeInfoWithThreadId:(NSString * _Nonnull)threadId select:(NSString * _Nonnull)select SWIFT_WARN_UNUSED_RESULT;
/// 获取父节点
/// \param threadId 线程id
///
/// \param select 节点的NID
///
///
/// returns:
///
- (NSString * _Nonnull)getNodeInfoParentWithThreadId:(NSString * _Nonnull)threadId nid:(NSString * _Nullable)nid SWIFT_WARN_UNUSED_RESULT;
/// 获取节点下的所有子节点
/// \param threadId 线程id
///
/// \param select 节点的NID
///
///
/// returns:
///
- (NSString * _Nonnull)getNodeInfoAllChildrenWithThreadId:(NSString * _Nonnull)threadId nid:(NSString * _Nullable)nid SWIFT_WARN_UNUSED_RESULT;
/// 获取节点的子节点  带索引
/// \param threadId 线程id
///
/// \param select 节点的NID
///
/// \param index 索引
///
///
/// returns:
///
- (NSString * _Nonnull)getNodeInfoChildWithThreadId:(NSString * _Nonnull)threadId nid:(NSString * _Nullable)nid index:(NSString * _Nullable)index SWIFT_WARN_UNUSED_RESULT;
/// 获取当前节点的 上面的 兄弟节点
/// \param threadId 线程id
///
/// \param select 节点的NID
///
///
/// returns:
///
- (NSString * _Nonnull)getPreviousSiblingNodeInfoWithThreadId:(NSString * _Nonnull)threadId nid:(NSString * _Nullable)nid SWIFT_WARN_UNUSED_RESULT;
/// 获取当前节点的 下面的 兄弟节点
/// \param threadId 线程id
///
/// \param select 节点的NID
///
///
/// returns:
///
- (NSString * _Nonnull)getNextSiblingNodeInfoWithThreadId:(NSString * _Nonnull)threadId nid:(NSString * _Nullable)nid SWIFT_WARN_UNUSED_RESULT;
/// 获取当前节点的 所有 兄弟节点
/// \param threadId 线程id
///
/// \param select 节点的NID
///
///
/// returns:
///
- (NSString * _Nonnull)getSiblingNodeInfoWithThreadId:(NSString * _Nonnull)threadId nid:(NSString * _Nullable)nid SWIFT_WARN_UNUSED_RESULT;
/// 级联获取一个子节点
/// \param nid 
///
/// \param select 
///
/// \param threadId 线程id
///
///
/// returns:
///
- (NSString * _Nonnull)getOneNodeInfoForNodeWithThreadId:(NSString * _Nonnull)threadId nid:(NSString * _Nullable)nid select:(NSString * _Nonnull)select SWIFT_WARN_UNUSED_RESULT;
/// 级联获取子节点集合
/// \param threadId 线程id
///
/// \param nid 
///
/// \param select 
///
///
/// returns:
///
- (NSString * _Nonnull)getNodeInfoForNodeWithThreadId:(NSString * _Nonnull)threadId nid:(NSString * _Nullable)nid select:(NSString * _Nonnull)select SWIFT_WARN_UNUSED_RESULT;
/// 设置xml的数据
/// \param threadId 线程id
///
/// \param doc 
///
///
/// returns:
///
- (NSString * _Nonnull)setDocumentWithThreadId:(NSString * _Nonnull)threadId doc:(NSString * _Nonnull)doc SWIFT_WARN_UNUSED_RESULT;
/// 是否缓存节点
/// \param threadId 线程id
///
/// \param r 字符串数据类型 true 代表锁定  false 代表 解锁
///
///
/// returns:
///
- (NSString * _Nonnull)setCacheDocumentWithThreadId:(NSString * _Nonnull)threadId r:(NSString * _Nonnull)r SWIFT_WARN_UNUSED_RESULT;
/// 是否有文档
/// \param threadId 线程id
///
///
/// returns:
///
- (BOOL)hasDocumentWithThreadId:(NSString * _Nonnull)threadId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)addImageWithImg:(UIImage * _Nullable)img SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)getAutoImageDataWithUuid:(NSString * _Nullable)uuid SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)removeImageWithUuid:(NSString * _Nullable)uuid SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)removeAllImage SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)recycleImageWithUuid:(NSString * _Nullable)uuid SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)isRecycledWithUuid:(NSString * _Nullable)uuid SWIFT_WARN_UNUSED_RESULT;
/// 单组比色
/// \param jsonString 比色参数
///
///
/// returns:
/// -1代表没找到，其他代表找到
- (NSString * _Nonnull)cmpColorWithJsonString:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
/// 多组比色
/// \param jsonString 
///
///
/// returns:
///
- (NSString * _Nonnull)cmpMultiColorWithJsonString:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
/// 找色
/// \param jsonString 
///
///
/// returns:
///
- (NSString * _Nonnull)findColorWithJsonString:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
/// 找非色
/// \param jsonString 
///
///
/// returns:
///
- (NSString * _Nonnull)findNotColorWithJsonString:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
/// 多点找色
/// \param jsonString 
///
///
/// returns:
///
- (NSString * _Nonnull)findMultiColorWithJsonString:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)clipImageWithImg:(UIImage * _Nullable)img SWIFT_WARN_UNUSED_RESULT;
/// 剪切图片
/// \param jsonString json字符串
///
///
/// returns:
/// autoimage的字符串
- (NSString * _Nonnull)clipWithJsonString:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
/// 获取单个点的颜色值
/// \param jsonString 
///
///
/// returns:
///
- (NSString * _Nonnull)pixelWithJsonString:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)pixelRGBWithJsonString:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
/// 获取高度
/// \param uuid 
///
///
/// returns:
///
- (NSString * _Nonnull)getHeight:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
/// 图片base64 给usb调用的
/// \param jsonString 
///
///
/// returns:
///
- (NSString * _Nonnull)base64:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
/// 获取宽度
/// \param uuid 
///
///
/// returns:
///
- (NSString * _Nonnull)getWidth:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
/// 旋转图片
/// \param jsonString 
///
///
/// returns:
///
- (NSString * _Nonnull)rotateImage:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
/// 转换为竖屏的图片
/// \param img 
///
///
/// returns:
///
- (UIImage * _Nullable)toUpImageWithImg:(UIImage * _Nullable)img SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)toLeftImageWithImg:(UIImage * _Nullable)img SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)toRightImageWithImg:(UIImage * _Nullable)img SWIFT_WARN_UNUSED_RESULT;
/// 将数据转换为竖屏图像
/// \param data 
///
///
/// returns:
///
- (UIImage * _Nullable)toUpImageFromData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
/// 将图片转成竖屏的数据
/// \param img 
///
///
/// returns:
///
- (NSData * _Nullable)toUpImageDataWithImg:(UIImage * _Nullable)img SWIFT_WARN_UNUSED_RESULT;
/// 图像转为数据
/// \param img 图像
///
/// \param q 质量
///
/// \param type 类型 1 jpg 2 png
///
///
/// returns:
///
- (NSData * _Nullable)toUpImageData2WithImg:(UIImage * _Nullable)img q:(float)q type:(NSInteger)type SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)toUpImageData3WithImg:(UIImage * _Nullable)img q:(float)q type:(NSInteger)type SWIFT_WARN_UNUSED_RESULT;
/// 将图片数据转成竖屏的数据
/// \param data 
///
///
/// returns:
///
- (NSData * _Nullable)toUpImageDataFromData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)findImageByColorWithJsonString:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)findImageByColorExWithJsonString:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)setOcrType:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)releaseAllOcr:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getOcrErrorMsg:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)setInitOcr:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)ocrImage:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)binaryzationImage:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)grayImage:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// 请求相册权限
/// \param json 
///
///
/// returns:
///
- (NSString * _Nonnull)requestPhotoAuthorization:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// 删除所有的图片
/// \param json 
///
///
/// returns:
///
- (NSString * _Nonnull)deleteAllPhotos:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// 删除所有的视频
/// \param json 
///
///
/// returns:
///
- (NSString * _Nonnull)deleteAllVideos:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// 保存图片到相册
/// \param json 
///
///
/// returns:
///
- (NSString * _Nonnull)saveImageToAlbumPath:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// 保存视频到相册
/// \param json 
///
///
/// returns:
///
- (NSString * _Nonnull)saveVideoToAlbumPath:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)saveVideoToAlbumPathForData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)savImageToAlbumPathForData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)requestEx:(NSString * _Nonnull)param SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)httpGet:(NSString * _Nonnull)url :(NSString * _Nonnull)timeout SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)httpPostJson:(NSString * _Nonnull)url :(NSString * _Nonnull)timeout :(NSString * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)operateClipboard:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// 使用openvmat模式存储数据
/// \param json {“use”:“1”}
///
///
/// returns:
/// ok or true
- (NSString * _Nonnull)useOpencvMat:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// 开启mat查找日志
/// \param json {“use”:“1”}
///
///
/// returns:
/// ok or true
- (NSString * _Nonnull)setMatLog:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// mat模式下的二值化 更加精准
/// \param json 
///
///
/// returns:
///
- (NSString * _Nonnull)binaryzationEx:(NSString * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// 将mat存储的图片转成普通的image格式
/// \param jsonString 
///
///
/// returns:
///
- (NSString * _Nonnull)matToImageFormat:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
/// 将UIImage存储的图片转成mat格式存储
/// \param jsonString 
///
///
/// returns:
///
- (NSString * _Nonnull)imageToMatFormat:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
/// opencv的找图
/// \param jsonString 
///
///
/// returns:
///
- (NSString * _Nonnull)findImage:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
/// opencv的模板匹配
/// \param jsonString 
///
///
/// returns:
///
- (NSString * _Nonnull)matchTemplate:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)saveFile:(NSData * _Nonnull)data :(NSString * _Nonnull)fileName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)playMp3:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stopMp3 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
